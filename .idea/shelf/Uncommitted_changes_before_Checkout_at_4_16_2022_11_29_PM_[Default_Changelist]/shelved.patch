Index: app/src/main/java/edu/temple/audiobookplayer/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.temple.audiobookplayer\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport androidx.lifecycle.ViewModelProvider\r\n\r\nclass MainActivity : AppCompatActivity(), BookListFragment.BookListFragmentInterface {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        val title = resources.getStringArray(R.array.title)\r\n        val author = resources.getStringArray(R.array.author)\r\n        val bookList = BookList()\r\n        for(i in 0..9){\r\n            bookList.add(BookObject(title[i],author[i]))\r\n        }\r\n        val fragment = supportFragmentManager.findFragmentById(R.id.container1)\r\n        if(fragment != null)\r\n            supportFragmentManager.beginTransaction().remove(fragment).commit()\r\n        supportFragmentManager\r\n            .beginTransaction()\r\n            .add(R.id.container1, BookListFragment.newInstance(bookList))\r\n            .commit()\r\n\r\n    }\r\n\r\n    override fun bookSelected() {\r\n        if(findViewById<View>(R.id.container2) == null)\r\n            supportFragmentManager\r\n                .beginTransaction()\r\n                .replace(R.id.container1,BookDetailsFragment())\r\n                .addToBackStack(null)\r\n                .commit()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/MainActivity.kt b/app/src/main/java/edu/temple/audiobookplayer/MainActivity.kt
--- a/app/src/main/java/edu/temple/audiobookplayer/MainActivity.kt	
+++ b/app/src/main/java/edu/temple/audiobookplayer/MainActivity.kt	
@@ -1,38 +1,171 @@
 package edu.temple.audiobookplayer
 
+import android.content.ComponentName
+import android.content.Intent
+import android.content.ServiceConnection
+import android.os.*
+import android.util.Log
 import androidx.appcompat.app.AppCompatActivity
-import android.os.Bundle
 import android.view.View
+import android.widget.ImageButton
+import androidx.activity.result.contract.ActivityResultContracts
 import androidx.lifecycle.ViewModelProvider
+import com.android.volley.toolbox.JsonObjectRequest
+import com.android.volley.toolbox.Volley
+import edu.temple.audlibplayer.PlayerService
+import com.android.volley.Request
+
+
+class MainActivity : AppCompatActivity() , BookListFragment.BookSelectedInterface, ControllerFragment.ControllerInterface{
+
+    //intializing everything
+    private lateinit var bookListFragment: BookListFragment
+    private lateinit var mediaControlBinder: PlayerService.MediaControlBinder
+    private var connected = false
+    private val isSingleContainer : Boolean by lazy{
+        findViewById<View>(R.id.container2) == null
+    }
+
+    private val selectedBookViewModel : bookViewModel by lazy {
+        ViewModelProvider(this).get(bookViewModel::class.java)
+    }
+    private val playingBookViewModel : PlayingBookViewModel by lazy {
+        ViewModelProvider(this).get(PlayingBookViewModel::class.java)
+    }
+
+    private val bookListViewModel : BookList by lazy {
+        ViewModelProvider(this).get(BookList::class.java)
+    }
+    companion object {
+        const val BOOKLISTFRAGMENT_KEY = "BookListFragment"
+    }
+    //done intialization
+
+    val audioBookHandler = Handler(Looper.getMainLooper()){ msg ->
+        msg.obj?.let { msgObj ->
+            val bookProgress = msgObj as PlayerService.BookProgress
+            if(playingBookViewModel.getBookPlaying().value == null){
+                Volley.newRequestQueue(this)
+                    .add(JsonObjectRequest(Request.Method.GET,API.getBookDataUrl(bookProgress.bookId),null,{ jsonObject ->
+                        playingBookViewModel.setBookPlaying(Book(jsonObject))
+                        if( selectedBookViewModel.getBook().value==null){
+                            selectedBookViewModel.setSelectedBook(playingBookViewModel.getBookPlaying().value)
+                            bookSelected()
+                        }
+                    },{}))
+            }
+            supportFragmentManager.findFragmentById(R.id.controlFragmentContainerView)?.run{
+                with(this as ControllerFragment){
+                    playingBookViewModel.getBookPlaying().value?.also{
+                        setPlayProgress(((bookProgress.progress/it.duration.toFloat())*100).toInt())
+                    }
+                }
+            }
+        }//end of msg
+        true
+    }//end of handler
+
+    private val searchRequest = registerForActivityResult(ActivityResultContracts.StartActivityForResult()){
+        supportFragmentManager.popBackStack()
+        it.data?.run {
+            bookListViewModel.copyBooks(getSerializableExtra(BookList.BOOKLIST_KEY)as BookList)
+            bookListFragment.bookListUpdated()
+        }
+    }//end of searchRequest`
 
-class MainActivity : AppCompatActivity(), BookListFragment.BookListFragmentInterface {
+    private val serviceConnect = object : ServiceConnection {
+        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {
+            mediaControlBinder = service as PlayerService.MediaControlBinder
+            mediaControlBinder.setProgressHandler(audioBookHandler)
+            connected = true
+        }//end of CONNECTED
+        override fun onServiceDisconnected(name: ComponentName?) {
+            connected=false
+        }//end of DISCONNECTED
+    }//end of service connect
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         setContentView(R.layout.activity_main)
-        val title = resources.getStringArray(R.array.title)
-        val author = resources.getStringArray(R.array.author)
-        val bookList = BookList()
-        for(i in 0..9){
-            bookList.add(BookObject(title[i],author[i]))
+
+        playingBookViewModel.getBookPlaying().observe(this,{
+            (supportFragmentManager.findFragmentById(R.id.controlFragmentContainerView) as ControllerFragment).setNowPlaying(it.title)
+        })
+
+        // If we're switching from one container to two containers
+        // clear BookDetailsFragment from container1
+        if(supportFragmentManager.findFragmentById(R.id.container1) is BookDetailsFragment
+            && selectedBookViewModel.getBook().value!=null){
+            supportFragmentManager.popBackStack()
         }
-        val fragment = supportFragmentManager.findFragmentById(R.id.container1)
-        if(fragment != null)
-            supportFragmentManager.beginTransaction().remove(fragment).commit()
-        supportFragmentManager
-            .beginTransaction()
-            .add(R.id.container1, BookListFragment.newInstance(bookList))
-            .commit()
+
+        if(savedInstanceState ==null){
+            bookListFragment= BookListFragment()
+            supportFragmentManager.beginTransaction()
+                .add(R.id.container1,bookListFragment, BOOKLISTFRAGMENT_KEY)
+                .commit()
+        }else{
+            bookListFragment=supportFragmentManager.findFragmentByTag(BOOKLISTFRAGMENT_KEY) as BookListFragment
+            if(isSingleContainer&&selectedBookViewModel.getBook().value!=null){
+                supportFragmentManager.beginTransaction()
+                    .replace(R.id.container1, BookDetailsFragment())
+                    .setReorderingAllowed(true)
+                    .addToBackStack(null)
+                    .commit()
+            }
+        }
+
+        if(!isSingleContainer&& supportFragmentManager.findFragmentById(R.id.container2) !is BookDetailsFragment)
+            supportFragmentManager.beginTransaction()
+                .add(R.id.container2,BookDetailsFragment())
+                .commit()
+        findViewById<ImageButton>(R.id.searchButton).setOnClickListener{
+            searchRequest.launch(Intent(this, SearchActivity::class.java))
+        }//end of portrait mode
 
+        bindService(Intent(this, PlayerService::class.java)
+            , serviceConnect
+            , BIND_AUTO_CREATE
+        )//end of bind service
+
+    }
+
+    override fun onBackPressed() {
+        selectedBookViewModel.setSelectedBook(null)
+        super.onBackPressed()
     }
 
-    override fun bookSelected() {
-        if(findViewById<View>(R.id.container2) == null)
-            supportFragmentManager
-                .beginTransaction()
+    override fun bookSelected(){
+        if(isSingleContainer){
+            supportFragmentManager.beginTransaction()
                 .replace(R.id.container1,BookDetailsFragment())
+                .setReorderingAllowed(true)
                 .addToBackStack(null)
                 .commit()
+        }
     }
+
+    override fun play() {
+        if(connected && selectedBookViewModel.getBook().value!=null){
+            Log.d("Button pressed", "Play button")
+            mediaControlBinder.play(selectedBookViewModel.getBook().value!!.id)
+            playingBookViewModel.setBookPlaying(selectedBookViewModel.getBook().value)
+            startService(Intent(this, PlayerService::class.java))
+        }
+    }
 
+    override fun pause() {
+        if(connected) mediaControlBinder.pause()
+    }
 
+    override fun stop() {
+        if(connected) mediaControlBinder.stop()
+        stopService(Intent(this, PlayerService::class.java))
+    }
+
+    override fun seek(position: Int) {
+        if(connected &&mediaControlBinder.isPlaying) mediaControlBinder
+            .seekTo((playingBookViewModel
+                .getBookPlaying().value!!.duration*(position.toFloat()/100)).toInt())
+    }
 }
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"DesignSurface\">\r\n    <option name=\"filePathToZoomLevelMap\">\r\n      <map>\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout-land/activity_main.xml\" value=\"0.21516754850088182\" />\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/activity_main.xml\" value=\"0.22826086956521738\" />\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/book_list_layout.xml\" value=\"0.11302083333333333\" />\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/card_layout.xml\" value=\"0.22826086956521738\" />\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/display_layout.xml\" value=\"0.22826086956521738\" />\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/fragment_book_details.xml\" value=\"0.11302083333333333\" />\r\n        <entry key=\"..\\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/fragment_book_list.xml\" value=\"0.11302083333333333\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -10,6 +10,7 @@
         <entry key="..\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/display_layout.xml" value="0.22826086956521738" />
         <entry key="..\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/fragment_book_details.xml" value="0.11302083333333333" />
         <entry key="..\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/fragment_book_list.xml" value="0.11302083333333333" />
+        <entry key="..\:/Users/tngo5/AndroidStudioProjects/AudioBookPlayer/app/src/main/res/layout/fragment_controller.xml" value="0.1" />
       </map>
     </option>
   </component>
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
--- a/.idea/vcs.xml	
+++ b/.idea/vcs.xml	
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$" vcs="Git" />
+    <mapping directory="$PROJECT_DIR$/AudioBB" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".MainActivity\">\r\n\r\n    <androidx.fragment.app.FragmentContainerView\r\n        android:id=\"@+id/container1\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"0dp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n</androidx.constraintlayout.widget.ConstraintLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
--- a/app/src/main/res/layout/activity_main.xml	
+++ b/app/src/main/res/layout/activity_main.xml	
@@ -10,8 +10,37 @@
         android:id="@+id/container1"
         android:layout_width="0dp"
         android:layout_height="0dp"
+        android:layout_marginStart="4dp"
+        android:layout_marginTop="8dp"
+        android:layout_marginEnd="4dp"
+        android:layout_marginBottom="4dp"
         app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/controlFragmentContainerView" />
+
+    <ImageButton
+        android:id="@+id/searchButton"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="4dp"
+        android:layout_marginTop="4dp"
+        android:layout_marginEnd="4dp"
+        android:src="@android:drawable/ic_menu_search"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
+
+    <androidx.fragment.app.FragmentContainerView
+        android:id="@+id/controlFragmentContainerView"
+        android:name="edu.temple.audiobookplayer.ControllerFragment"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="4dp"
+        android:layout_marginTop="4dp"
+        android:layout_marginEnd="4dp"
+        app:layout_constraintEnd_toEndOf="@+id/searchButton"
+        app:layout_constraintStart_toStartOf="@+id/searchButton"
+        app:layout_constraintTop_toBottomOf="@+id/searchButton" />
+
 </androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/java/edu/temple/audiobookplayer/BookListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.temple.audiobookplayer\r\n\r\nimport android.content.Context\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\n\r\nprivate const val BookListKey = \"param1\"\r\n\r\nclass BookListFragment : Fragment() {\r\n    private var bookList: ArrayList<BookObject>? = null\r\n    private lateinit var bookViewModel: BookViewModel\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        bookViewModel = ViewModelProvider(requireActivity()).get(BookViewModel::class.java)\r\n        arguments?.let {\r\n            bookList = it.getParcelableArrayList<BookObject>(BookListKey);\r\n        }\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        return inflater.inflate(R.layout.fragment_book_list, container, false) as RecyclerView\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        with(view as RecyclerView){\r\n            bookList?.run {\r\n                val clickEvent = {\r\n                        book : BookObject -> bookViewModel.setSelectedBook(book)\r\n                    (requireActivity() as BookListFragmentInterface).bookSelected()\r\n                }\r\n                layoutManager = LinearLayoutManager(requireContext())\r\n                adapter = BookAdapter(this,clickEvent)\r\n            }\r\n        }\r\n    }\r\n\r\n    class BookAdapter(_books : ArrayList<BookObject>, _clickEvent : (BookObject) -> Unit) : RecyclerView.Adapter<BookAdapter.BookViewHolder>(){\r\n\r\n        val books = _books\r\n        val clickEvent = _clickEvent\r\n\r\n        class BookViewHolder(_view : View) : RecyclerView.ViewHolder(_view){\r\n            val view = _view\r\n            val titleTxt = _view.findViewById<TextView>(R.id.titleText)\r\n            val authorTxt = _view.findViewById<TextView>(R.id.authorText)\r\n        }\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BookViewHolder {\r\n            return BookViewHolder(\r\n                LayoutInflater.from(parent.context)\r\n                    .inflate(R.layout.book_list_layout, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: BookViewHolder, position: Int) {\r\n            holder.titleTxt.text = books[position].title\r\n            holder.authorTxt.text = books[position].author\r\n            holder.view.setOnClickListener{clickEvent(books[position])}\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return books.size\r\n        }\r\n    }\r\n\r\n    companion object {\r\n        fun newInstance(bookList: BookList) =\r\n            BookListFragment().apply {\r\n                arguments = Bundle().apply {\r\n                    putParcelableArrayList(BookListKey, bookList.list)\r\n                }\r\n            }\r\n    }\r\n\r\n    interface BookListFragmentInterface {\r\n        fun bookSelected()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/BookListFragment.kt b/app/src/main/java/edu/temple/audiobookplayer/BookListFragment.kt
--- a/app/src/main/java/edu/temple/audiobookplayer/BookListFragment.kt	
+++ b/app/src/main/java/edu/temple/audiobookplayer/BookListFragment.kt	
@@ -1,90 +1,58 @@
 package edu.temple.audiobookplayer
 
-import android.content.Context
 import android.os.Bundle
 import androidx.fragment.app.Fragment
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import android.widget.TextView
 import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 
-private const val BookListKey = "param1"
+private const val BOOK_LIST = "booklist"
 
 class BookListFragment : Fragment() {
-    private var bookList: ArrayList<BookObject>? = null
-    private lateinit var bookViewModel: BookViewModel
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        bookViewModel = ViewModelProvider(requireActivity()).get(BookViewModel::class.java)
-        arguments?.let {
-            bookList = it.getParcelableArrayList<BookObject>(BookListKey);
-        }
+    private val bookList: BookList by lazy {
+        ViewModelProvider(requireActivity()).get(BookList::class.java)
     }
 
     override fun onCreateView(
-        inflater: LayoutInflater, container: ViewGroup?,
-        savedInstanceState: Bundle?
+        inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?
     ): View? {
-        return inflater.inflate(R.layout.fragment_book_list, container, false) as RecyclerView
-    }
+        // Inflate the booklistfragment layout
+        return inflater.inflate(R.layout.fragment_book_list,container,false)
+    }//end of view
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        with(view as RecyclerView){
-            bookList?.run {
-                val clickEvent = {
-                        book : BookObject -> bookViewModel.setSelectedBook(book)
-                    (requireActivity() as BookListFragmentInterface).bookSelected()
-                }
-                layoutManager = LinearLayoutManager(requireContext())
-                adapter = BookAdapter(this,clickEvent)
-            }
-        }
-    }
-
-    class BookAdapter(_books : ArrayList<BookObject>, _clickEvent : (BookObject) -> Unit) : RecyclerView.Adapter<BookAdapter.BookViewHolder>(){
-
-        val books = _books
-        val clickEvent = _clickEvent
-
-        class BookViewHolder(_view : View) : RecyclerView.ViewHolder(_view){
-            val view = _view
-            val titleTxt = _view.findViewById<TextView>(R.id.titleText)
-            val authorTxt = _view.findViewById<TextView>(R.id.authorText)
-        }
-
-        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): BookViewHolder {
-            return BookViewHolder(
-                LayoutInflater.from(parent.context)
-                    .inflate(R.layout.book_list_layout, parent, false)
-            )
-        }
-
-        override fun onBindViewHolder(holder: BookViewHolder, position: Int) {
-            holder.titleTxt.text = books[position].title
-            holder.authorTxt.text = books[position].author
-            holder.view.setOnClickListener{clickEvent(books[position])}
+        val bookViewModel = ViewModelProvider(requireActivity()).get(bookViewModel::class.java)
+        val clicked:(Book)->Unit={
+                book: Book ->  bookViewModel.setSelectedBook(book)
+            (activity as BookSelectedInterface).bookSelected()
+        }
+        with( view as RecyclerView){
+            layoutManager = LinearLayoutManager(requireActivity())
+            adapter=CustomAdapter(bookList,clicked)
         }
+    }//end of onViewCreated
 
-        override fun getItemCount(): Int {
-            return books.size
+    fun bookListUpdated(){
+        view?.apply{
+            (this as RecyclerView).adapter?.notifyDataSetChanged()
         }
-    }
+    }//end of bookListUpdated
 
-    companion object {
-        fun newInstance(bookList: BookList) =
-            BookListFragment().apply {
-                arguments = Bundle().apply {
-                    putParcelableArrayList(BookListKey, bookList.list)
+    companion object{
+        @JvmStatic
+        fun newInstance(bookList: BookList)=
+            BookListFragment().apply{
+                arguments = Bundle().apply{
+                    putSerializable(BOOK_LIST,bookList)
                 }
             }
     }
 
-    interface BookListFragmentInterface {
+    interface BookSelectedInterface {
         fun bookSelected()
     }
-
 }
\ No newline at end of file
Index: app/src/main/java/edu/temple/audiobookplayer/BookViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.temple.audiobookplayer\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\n\r\nclass BookViewModel : ViewModel(){\r\n\r\n    val selectedBookObject : MutableLiveData<BookObject> by lazy{\r\n        MutableLiveData<BookObject>()\r\n    }\r\n\r\n    fun setSelectedBook(book : BookObject){\r\n        selectedBookObject.value = book\r\n    }\r\n\r\n    fun getSelectedBook() : LiveData<BookObject>{\r\n        return selectedBookObject\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/BookViewModel.kt b/app/src/main/java/edu/temple/audiobookplayer/BookViewModel.kt
--- a/app/src/main/java/edu/temple/audiobookplayer/BookViewModel.kt	
+++ b/app/src/main/java/edu/temple/audiobookplayer/BookViewModel.kt	
@@ -1,21 +1,22 @@
 package edu.temple.audiobookplayer
 
+
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
+import edu.temple.audlibplayer.PlayerService
 
-class BookViewModel : ViewModel(){
+class bookViewModel: ViewModel() {
 
-    val selectedBookObject : MutableLiveData<BookObject> by lazy{
-        MutableLiveData<BookObject>()
+    private val book: MutableLiveData<Book> by lazy {
+        MutableLiveData()
     }
 
-    fun setSelectedBook(book : BookObject){
-        selectedBookObject.value = book
+    fun getBook(): LiveData<Book> {
+        return book
     }
 
-    fun getSelectedBook() : LiveData<BookObject>{
-        return selectedBookObject
+    fun setSelectedBook(item: Book?) {
+        this.book.value = item
     }
-
-}
\ No newline at end of file
+}
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nplugins {\r\n    id 'com.android.application' version '7.1.0' apply false\r\n    id 'com.android.library' version '7.1.0' apply false\r\n    id 'org.jetbrains.kotlin.android' version '1.5.30' apply false\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	
+++ b/build.gradle	
@@ -1,8 +1,13 @@
 // Top-level build file where you can add configuration options common to all sub-projects/modules.
-plugins {
-    id 'com.android.application' version '7.1.0' apply false
-    id 'com.android.library' version '7.1.0' apply false
-    id 'org.jetbrains.kotlin.android' version '1.5.30' apply false
+buildscript {
+    repositories {
+        google()
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:7.1.2'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31"
+    }
 }
 
 task clean(type: Delete) {
Index: app/src/main/res/layout/fragment_book_details.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    tools:context=\".BookDetailsFragment\">\r\n\r\n    <TextView\r\n        android:id=\"@+id/bigTitle\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textAlignment=\"center\"\r\n        android:textSize=\"60sp\"\r\n        app:layout_constraintBottom_toBottomOf=\"parent\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toTopOf=\"parent\" />\r\n\r\n    <TextView\r\n        android:id=\"@+id/bigAuthor\"\r\n        android:layout_width=\"0dp\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:textAlignment=\"center\"\r\n        android:textSize=\"20sp\"\r\n        app:layout_constraintEnd_toEndOf=\"parent\"\r\n        app:layout_constraintHorizontal_bias=\"0.498\"\r\n        app:layout_constraintStart_toStartOf=\"parent\"\r\n        app:layout_constraintTop_toBottomOf=\"@+id/bigTitle\" />\r\n\r\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_book_details.xml b/app/src/main/res/layout/fragment_book_details.xml
--- a/app/src/main/res/layout/fragment_book_details.xml	
+++ b/app/src/main/res/layout/fragment_book_details.xml	
@@ -3,29 +3,51 @@
     xmlns:app="http://schemas.android.com/apk/res-auto"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    tools:context=".BookDetailsFragment">
+    android:layout_height="match_parent"
+    tools:context=".BookDetailsFragment"
+    >
 
     <TextView
-        android:id="@+id/bigTitle"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
+        android:id="@+id/authDet"
+        android:layout_width="241dp"
+        android:layout_height="38dp"
+        android:layout_marginTop="25dp"
+        android:layout_marginBottom="75dp"
+        android:text="TextView"
         android:textAlignment="center"
-        android:textSize="60sp"
+        android:textSize="18sp"
+        android:textStyle="italic"
         app:layout_constraintBottom_toBottomOf="parent"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
+        app:layout_constraintTop_toBottomOf="@+id/titleDet" />
 
     <TextView
-        android:id="@+id/bigAuthor"
+        android:id="@+id/titleDet"
+        android:layout_width="367dp"
+        android:layout_height="69dp"
+        android:layout_marginStart="50dp"
+        android:layout_marginEnd="50dp"
+        android:textAlignment="center"
+        android:textSize="24sp"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toTopOf="@+id/authDet"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.459"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/bookCover" />
+
+    <ImageView
+        android:id="@+id/bookCover"
         android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:textAlignment="center"
-        android:textSize="20sp"
+        android:layout_height="0dp"
+        android:layout_marginStart="25dp"
+        android:layout_marginTop="25dp"
+        android:layout_marginEnd="25dp"
+        android:layout_marginBottom="25dp"
+        app:layout_constraintBottom_toTopOf="@+id/titleDet"
         app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.498"
         app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/bigTitle" />
-
+        app:layout_constraintTop_toTopOf="parent"
+        tools:src="@tools:sample/avatars" />
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_book_list.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<androidx.recyclerview.widget.RecyclerView xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    tools:context=\".BookListFragment\"/>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_book_list.xml b/app/src/main/res/layout/fragment_book_list.xml
--- a/app/src/main/res/layout/fragment_book_list.xml	
+++ b/app/src/main/res/layout/fragment_book_list.xml	
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="utf-8"?>
+
 <androidx.recyclerview.widget.RecyclerView xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:tools="http://schemas.android.com/tools"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
-    tools:context=".BookListFragment"/>
\ No newline at end of file
+    tools:context=".BookListFragment" />
\ No newline at end of file
Index: app/src/main/java/edu/temple/audiobookplayer/ControllerFragment.kt
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/ControllerFragment.kt b/app/src/main/java/edu/temple/audiobookplayer/ControllerFragment.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/edu/temple/audiobookplayer/ControllerFragment.kt	
@@ -0,0 +1,71 @@
+package edu.temple.audiobookplayer
+
+import android.os.Bundle
+import androidx.fragment.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageButton
+import android.widget.ImageView
+import android.widget.SeekBar
+import android.widget.TextView
+
+class ControllerFragment : Fragment() {
+
+    lateinit var playButton: ImageButton
+    lateinit var pauseButton: ImageButton
+    lateinit var stopButton: ImageView
+    var seekBar: SeekBar? = null
+    var nowPlayingTextView: TextView? = null
+
+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,savedInstanceState: Bundle?): View {
+        val layout =  inflater.inflate(R.layout.fragment_controller, container, false)
+        playButton = layout.findViewById(R.id.playButton)
+        pauseButton = layout.findViewById(R.id.pauseButton)
+        stopButton = layout.findViewById(R.id.stopButton)
+        seekBar = layout.findViewById(R.id.seekBar)
+        nowPlayingTextView = layout.findViewById(R.id.nowPlayingTextView)
+
+        seekBar?.setOnSeekBarChangeListener(object: SeekBar.OnSeekBarChangeListener{
+            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
+                if (fromUser) {
+                    (activity as ControllerInterface).seek(progress)
+                }//end of if
+            }
+            override fun onStartTrackingTouch(seekBar: SeekBar?) {
+            }
+            override fun onStopTrackingTouch(seekBar: SeekBar?) {
+            }
+        })
+
+        val onClickListener = View.OnClickListener {
+            var parent = activity as ControllerInterface
+            when(it.id){
+                R.id.playButton -> parent.play()
+                R.id.pauseButton -> parent.pause()
+                R.id.stopButton -> parent.stop()
+            }
+        }
+
+        //this is where the click of each button is made
+        playButton.setOnClickListener(onClickListener)
+        pauseButton.setOnClickListener(onClickListener)
+        stopButton.setOnClickListener(onClickListener)
+        return layout
+    }
+
+    fun setNowPlaying(title: String){
+        nowPlayingTextView?.text = title
+    }
+
+    fun setPlayProgress(progress : Int){
+        seekBar?.setProgress(progress, true)
+    }
+
+    interface ControllerInterface{
+        fun play()
+        fun pause()
+        fun stop()
+        fun seek(position: Int)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/edu/temple/audiobookplayer/Book.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/Book.kt b/app/src/main/java/edu/temple/audiobookplayer/Book.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/edu/temple/audiobookplayer/Book.kt	
@@ -0,0 +1,8 @@
+package edu.temple.audiobookplayer
+
+import org.json.JSONObject
+import java.io.Serializable
+
+data class Book(val id: Int, val title: String, val author: String, val duration : Int, val coverURL: String) : Serializable {
+    constructor(book: JSONObject) : this(book.getInt("id"), book.getString("title"), book.getString("author"),book.getInt("duration"), book.getString("cover_url"))
+}
Index: app/src/main/java/edu/temple/audiobookplayer/PlayingBookViewModel.kt
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/PlayingBookViewModel.kt b/app/src/main/java/edu/temple/audiobookplayer/PlayingBookViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/edu/temple/audiobookplayer/PlayingBookViewModel.kt	
@@ -0,0 +1,20 @@
+package edu.temple.audiobookplayer
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+
+class PlayingBookViewModel: ViewModel() {
+
+    private val book: MutableLiveData<Book> by lazy{
+        MutableLiveData()
+    }
+
+    fun getBookPlaying(): LiveData<Book> {
+        return book
+    }
+
+    fun setBookPlaying(selectedBook: Book?){
+        this.book.value = selectedBook
+    }
+}
\ No newline at end of file
Index: app/src/main/java/edu/temple/audiobookplayer/SearchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/SearchActivity.kt b/app/src/main/java/edu/temple/audiobookplayer/SearchActivity.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/edu/temple/audiobookplayer/SearchActivity.kt	
@@ -0,0 +1,41 @@
+package edu.temple.audiobookplayer
+
+import androidx.appcompat.app.AppCompatActivity
+import android.os.Bundle
+import com.android.volley.RequestQueue
+import com.android.volley.toolbox.Volley
+import android.content.Intent
+import android.widget.Button
+import android.widget.EditText
+import android.widget.ImageButton
+import com.android.volley.Request
+import com.android.volley.toolbox.JsonArrayRequest
+
+class SearchActivity : AppCompatActivity() {
+
+    val searchButton: ImageButton by lazy{
+        findViewById(R.id.searchButton)
+    }
+
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_search)
+        this.setFinishOnTouchOutside(false)
+        searchButton.setOnClickListener {
+            val url = "https://kamorris.com/lab/cis3515/search.php?term="+
+                    findViewById<EditText>(R.id.booksearch).text.toString()
+            Volley.newRequestQueue(this).add(
+                JsonArrayRequest(Request.Method.GET, url, null, {
+                    setResult(
+                        RESULT_OK,
+                        Intent().putExtra(
+                            BookList.BOOKLIST_KEY,
+                            BookList().apply { populateBooks(it) })
+                    )
+                    finish()
+                }, {})
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/edu/temple/audiobookplayer/API.kt
===================================================================
diff --git a/app/src/main/java/edu/temple/audiobookplayer/API.kt b/app/src/main/java/edu/temple/audiobookplayer/API.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/edu/temple/audiobookplayer/API.kt	
@@ -0,0 +1,9 @@
+package edu.temple.audiobookplayer
+
+class API {
+    companion object URL {
+        fun getBookDataUrl(id: Int): String {
+            return "https://kamorris.com/lab/cis3515/book.php?id=${id}"
+        }
+    }
+}
\ No newline at end of file
